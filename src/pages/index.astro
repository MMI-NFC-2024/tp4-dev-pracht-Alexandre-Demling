---
import Layout from "../layouts/Layout.astro";
---
<Layout>
  <h1 class="text-2xl">Penguins et Cars — avec filtres</h1>

  <!-- Penguins -->
  <h2 class="text-xl mt-8 mb-2"> Penguins</h2>
  <div style="display:flex;gap:1rem;align-items:center;margin:1rem 0;">
    <label>Espèce <select id="species"><option value="">Toutes</option></select></label>
    <label>Île <select id="island"><option value="">Toutes</option></select></label>
    <label>Sexe <select id="sex"><option value="">Tous</option></select></label>
    <button id="reset-penguins">Réinitialiser</button>
  </div>
  <div id="chart-penguins" style="min-height:360px;border:1px solid #eee;padding:8px;"></div>

  <!-- Cars -->
  <h2 class="text-xl mt-10 mb-2">Cars</h2>
  <div style="display:flex;gap:1rem;align-items:center;margin:1rem 0;">
    <label>Nom <select id="name"><option value="">Tous les modèles</option></select></label>
    <label>Cylindres <select id="cylinders"><option value="">Tous les cylindres</option></select></label>
    <label>Année <select id="year"><option value="">Toutes les années</option></select></label>
    <button id="reset-cars">Réinitialiser</button>
  </div>
  <div id="chart-cars" style="min-height:360px;border:1px solid #eee;padding:8px;"></div>

  <script type="module">
    import * as Plot from "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6.17/+esm";

    function uniqueSorted(arr) {
      return Array.from(new Set(arr.filter(Boolean))).sort();
    }

    function populateSelect(selectEl, values, label) {
      selectEl.innerHTML = "";
      const opt0 = document.createElement("option");
      opt0.value = "";
      opt0.textContent = label;
      selectEl.appendChild(opt0);
      for (const v of values) {
        const o = document.createElement("option");
        o.value = v;
        o.textContent = v;
        selectEl.appendChild(o);
      }
    }

    // ----------------------
    // PENGUINS
    // ----------------------
    const speciesSelect = document.getElementById("species");
    const islandSelect  = document.getElementById("island");
    const sexSelect     = document.getElementById("sex");
    const chartPenguins = document.getElementById("chart-penguins");
    const resetPenguins = document.getElementById("reset-penguins");

    let penguins = [];

    async function initPenguins() {
      const res = await fetch("/data/penguins.json");
      penguins = await res.json();

      populateSelect(speciesSelect, uniqueSorted(penguins.map(p => p.species)), "Toutes les espèces");
      populateSelect(islandSelect,  uniqueSorted(penguins.map(p => p.island)), "Toutes les îles");
      populateSelect(sexSelect,     uniqueSorted(penguins.map(p => p.sex)), "Tous les sexes");

      speciesSelect.addEventListener("change", renderPenguins);
      islandSelect.addEventListener("change", renderPenguins);
      sexSelect.addEventListener("change", renderPenguins);
      resetPenguins.addEventListener("click", () => {
        speciesSelect.value = "";
        islandSelect.value = "";
        sexSelect.value = "";
        renderPenguins();
      });

      renderPenguins();
    }

    function renderPenguins() {
      const data = penguins
        .filter(d => !speciesSelect.value || d.species === speciesSelect.value)
        .filter(d => !islandSelect.value || d.island === islandSelect.value)
        .filter(d => !sexSelect.value || d.sex === sexSelect.value)
        .filter(d => d.culmen_length_mm && d.culmen_depth_mm);

      chartPenguins.innerHTML = "";
      if (!data.length) {
        chartPenguins.textContent = "Aucun point à afficher.";
        return;
      }

      const plot = Plot.plot({
        width: 700,
        height: 500,
        x: { label: "Culmen length (mm)" },
        y: { label: "Culmen depth (mm)" },
        marks: [
          Plot.dot(data, {
            x: "culmen_length_mm",
            y: "culmen_depth_mm",
            stroke: "species",
            r: 4,
            title: d => `${d.species} — ${d.island} — ${d.sex}`
          })
        ]
      });
      chartPenguins.appendChild(plot);
    }

    // ----------------------
    // CARS
    // ----------------------
    const nameSelect = document.getElementById("name");
    const cylindersSelect = document.getElementById("cylinders");
    const yearSelect = document.getElementById("year");
    const chartCars = document.getElementById("chart-cars");
    const resetCars = document.getElementById("reset-cars");

    let cars = [];

    async function initCars() {
      const res = await fetch("/data/cars.json");
      cars = await res.json();

      populateSelect(nameSelect, uniqueSorted(cars.map(c => c.name)), "Tous les modèles");
      populateSelect(cylindersSelect, uniqueSorted(cars.map(c => c.cylinders)), "Tous les cylindres");
      populateSelect(yearSelect, uniqueSorted(cars.map(c => c.year)), "Toutes les années");

      nameSelect.addEventListener("change", renderCars);
      cylindersSelect.addEventListener("change", renderCars);
      yearSelect.addEventListener("change", renderCars);
      resetCars.addEventListener("click", () => {
        nameSelect.value = "";
        cylindersSelect.value = "";
        yearSelect.value = "";
        renderCars();
      });

      renderCars();
    }

    function renderCars() {
      const data = cars
        .filter(d => !nameSelect.value || d.name === nameSelect.value)
        .filter(d => !cylindersSelect.value || d.cylinders == cylindersSelect.value)
        .filter(d => !yearSelect.value || d.year == yearSelect.value)
        .filter(d => d["power (hp)"] && d["economy (mpg)"]);

      chartCars.innerHTML = "";
      if (!data.length) {
        chartCars.textContent = "Aucun point à afficher.";
        return;
      }

      const plot = Plot.plot({
        width: 700,
        height: 500,
        x: { label: "Puissance (hp)" },
        y: { label: "Consommation (mpg)" },
        marks: [
          Plot.dot(data, {
            x: "power (hp)",
            y: "economy (mpg)",
            r: 4,
            title: d => d.name
          })
        ]
      });
      chartCars.appendChild(plot);
    }

    // Init both
    initPenguins().catch(err => {
      console.error("Erreur penguins:", err);
      chartPenguins.textContent = "Erreur : " + err.message;
    });

    initCars().catch(err => {
      console.error("Erreur cars:", err);
      chartCars.textContent = "Erreur : " + err.message;
    });
  </script>
</Layout>
